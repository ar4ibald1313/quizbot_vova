import logging
import random
import os

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏ –∞–¥–º–∏–Ω ID
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

# –ö–æ–º–∞–Ω–¥—ã
teams = {
    "elves": {"name": "–≠–ª—å—Ñ—ã", "motto": "–í–µ—á–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞–º–∏, –ø–æ–±–µ–¥–∞ –≤ –Ω–∞—Å!", "image": "assets/elves.jpg"},
    "orcs": {"name": "–û—Ä–∫–∏", "motto": "–ö—Ç–æ —Å–∏–ª—å–Ω–µ–µ ‚Äî —Ç–æ—Ç –ø—Ä–∞–≤–µ–µ!", "image": "assets/orcs.jpg"},
    "dwarves": {"name": "–ì–Ω–æ–º—ã", "motto": "–ö–∞–º–µ–Ω—å ‚Äî –∫—Ä–µ–ø–æ—Å—Ç—å, —Å—Ç–∞–ª—å ‚Äî –Ω–∞—à–∞ –ø–µ—Å–Ω—è!", "image": "assets/dwarves.jpg"},
    "halflings": {"name": "–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫–∏", "motto": "–ú–∞–ª –¥–∞ —É–¥–∞–ª, –Ω–æ —É–¥–∞—á–∞ –≤–µ–ª–∏–∫–∞!", "image": "assets/halfings.jpg"},
    "dragons": {"name": "–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ", "motto": "–û–≥–æ–Ω—å –≤ –∫—Ä–æ–≤–∏ ‚Äî —Å–ª–∞–≤–∞ –≤ –¥–µ–ª–∞—Ö!", "image": "assets/dragons.jpg"},
}

# –ò–≥—Ä–æ–∫–∏
players = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û–ø—Ä–µ–¥–µ–ª–∏ –º–æ—é —Å—É–¥—å–±—É üé≤", callback_data="choose_team")]
    ]
    if update.effective_user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã", callback_data="reset")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "choose_team":
        user_id = query.from_user.id
        if user_id in players:
            await query.edit_message_text("–¢—ã —É–∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω!")
            return

        # –ü–æ–∫–∞–∑–∞—Ç—å –≥–∏—Ñ–∫—É –∫—É–±–∏–∫–∞
        with open("assets/dice.gif", "rb") as gif:
            await query.message.reply_animation(gif)

        # –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        counts = {team: list(players.values()).count(team) for team in teams}
        min_count = min(counts.values())
        available = [t for t, c in counts.items() if c == min_count]
        chosen_team = random.choice(available)

        players[user_id] = chosen_team
        team = teams[chosen_team]

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(team["image"], "rb") as img:
            await query.message.reply_photo(
                photo=img,
                caption=f"‚ú® {team['name']} ‚ú®\n{team['motto']}"
            )

    elif query.data == "reset":
        if query.from_user.id == ADMIN_ID:
            players.clear()
            await query.edit_message_text("‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—à–µ–Ω—ã!")
        else:
            await query.edit_message_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))

    app.run_polling()

if __name__ == "__main__":
    main()
