import logging
import os
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: "—Ä–∞—Å–∞"}
user_db = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_id: int):
    if user_id in user_db:
        kb = [[KeyboardButton("–ú–æ—è –∫–æ–º–∞–Ω–¥–∞")], [KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å")]]
    else:
        kb = [[KeyboardButton("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ—é —Å—É–¥—å–±—É")]]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã", reply_markup=get_main_keyboard(message.from_user.id))

@dp.message_handler(lambda msg: msg.text == "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ—é —Å—É–¥—å–±—É")
async def define_destiny(message: types.Message):
    races = ["–≠–ª—å—Ñ—ã", "–ì–Ω–æ–º—ã", "–õ—é–¥–∏", "–û—Ä–∫–∏"]
    choice = random.choice(races)
    user_db[message.from_user.id] = choice
    await message.answer(f"–¢—ã —Ç–µ–ø–µ—Ä—å –≤ –∫–æ–º–∞–Ω–¥–µ: <b>{choice}</b>", reply_markup=get_main_keyboard(message.from_user.id))

@dp.message_handler(lambda msg: msg.text == "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞")
async def my_team(message: types.Message):
    team = user_db.get(message.from_user.id)
    if team:
        await message.answer(f"–¢—ã –≤ –∫–æ–º–∞–Ω–¥–µ: <b>{team}</b>", reply_markup=get_main_keyboard(message.from_user.id))
    else:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ—é —Å—É–¥—å–±—É"))
        await message.answer("–í—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Å–≤–æ—é —Å—É–¥—å–±—É", reply_markup=kb)

@dp.message_handler(lambda msg: msg.text == "–°–±—Ä–æ—Å–∏—Ç—å")
async def reset_team(message: types.Message):
    user_db.pop(message.from_user.id, None)
    await message.answer("–ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=get_main_keyboard(message.from_user.id))

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
